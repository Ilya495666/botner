package org.example;

import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import java.sql.*;
import java.util.*;

public class BotOk extends TelegramLongPollingBot {
    // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway
    private static final String DB_URL = System.getenv("DB_URL");
    private static final String DB_USER = System.getenv("DB_USER");
    private static final String DB_PASSWORD = System.getenv("DB_PASSWORD");

    // –°–ø–∏—Å–æ–∫ chatId –ø–µ–¥–∞–≥–æ–≥–æ–≤
    private static final Set<Long> TEACHER_IDS = Set.of(
            7241469346L, // –ü—Ä–∏–º–µ—Ä: —Ç–≤–æ–π ID
            1204112225L, // –ü—Ä–∏–º–µ—Ä: –ù–∞—Ç–∞–ª—å—è
            5228430828L  // –ü—Ä–∏–º–µ—Ä: –ö—Ä–∏—Å—Ç–∏–Ω–∞
    );

    private enum BookingState {
        SELECT_DAY,
        SELECT_TIME,
        ENTER_CHILD_NAME,
        CONFIRM,
        CANCEL_SELECT,
        TEACHER_MENU
    }

    private static class UserState {
        BookingState state;
        String selectedDay;
        String selectedTime;
        int scheduleId;
        String childName;
        Map<Integer, Integer> bookingOptions;
    }

    private final Map<Long, UserState> userStates = new HashMap<>();

    @Override
    public String getBotUsername() {
        return "clubOstrovOk_bot";
    }

    @Override
    public String getBotToken() {
        return System.getenv("BOT_TOKEN");
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            long chatId = update.getMessage().getChatId();
            String messageText = update.getMessage().getText();

            // –î–ª—è –ø–µ–¥–∞–≥–æ–≥–æ–≤ –æ—Ç–¥–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞
            if (TEACHER_IDS.contains(chatId)) {
                if (!userStates.containsKey(chatId) || messageText.equals("/start") || messageText.equals("‚Ü©Ô∏è –ù–∞ –≥–ª–∞–≤–Ω—É—é")) {
                    UserState userState = new UserState();
                    userState.state = BookingState.TEACHER_MENU;
                    userStates.put(chatId, userState);
                    sendTeacherMenu(chatId);
                    return;
                }
                if (userStates.get(chatId).state == BookingState.TEACHER_MENU) {
                    handleTeacherCommand(chatId, messageText);
                    return;
                }
            }

            // –û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
            if (messageText.equals("/start")) {
                sendStartMessage(chatId);
            } else if (messageText.equals("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")) {
                sendSchedule(chatId);
            } else if (messageText.equals("üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è") || messageText.equals("‚Ü©Ô∏è –ù–∞–∑–∞–¥")) {
                startBookingProcess(chatId);
            } else if (messageText.equals("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å")) {
                startCancelBookingProcess(chatId);
            } else if (userStates.containsKey(chatId)) {
                try {
                    processBookingStep(chatId, messageText);
                } catch (SQLException e) {
                    throw new RuntimeException(e);
                }
            } else {
                sendMessage(chatId, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é");
            }
        }
    }

    // ========== –ú–ï–ù–Æ –ü–ï–î–ê–ì–û–ì–ê ==========
    private void handleTeacherCommand(long chatId, String messageText) {
        if (messageText.equals("üë• –ú–æ–∏ –∑–∞–ø–∏—Å–∏")) {
            showTeacherBookings(chatId);
        } else if (messageText.equals("üìä –û—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è")) {
            sendDailyReport(chatId);
        } else if (messageText.equals("‚Ü©Ô∏è –ù–∞ –≥–ª–∞–≤–Ω—É—é")) {
            sendTeacherMenu(chatId);
        } else {
            sendMessage(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.");
        }
    }

    private void sendTeacherMenu(long chatId) {
        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
        List<KeyboardRow> rows = new ArrayList<>();
        KeyboardRow row1 = new KeyboardRow();
        row1.add(new KeyboardButton("üë• –ú–æ–∏ –∑–∞–ø–∏—Å–∏"));
        row1.add(new KeyboardButton("üìä –û—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è"));
        KeyboardRow row2 = new KeyboardRow();
        row2.add(new KeyboardButton("‚Ü©Ô∏è –ù–∞ –≥–ª–∞–≤–Ω—É—é"));
        rows.add(row1);
        rows.add(row2);
        keyboard.setKeyboard(rows);
        keyboard.setResizeKeyboard(true);

        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText("üë©‚Äçüè´ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø–µ–¥–∞–≥–æ–≥–∞\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:");
        message.setReplyMarkup(keyboard);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void showTeacherBookings(long chatId) {
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             PreparedStatement pstmt = conn.prepareStatement(
                     "SELECT s.day, s.time, b.child_name " +
                             "FROM schedule s LEFT JOIN bookings b ON s.id = b.schedule_id " +
                             "ORDER BY s.day, s.time, b.child_name")) {

            ResultSet rs = pstmt.executeQuery();
            StringBuilder sb = new StringBuilder("üë• –ó–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–Ω—è—Ç–∏—è '–ù–µ–π—Ä–æ–≥–∏–º–Ω–∞—Å—Ç–∏–∫–∞':\n\n");
            String currentDay = "";
            String currentTime = "";
            while (rs.next()) {
                String day = rs.getString("day");
                String time = rs.getString("time");
                String child = rs.getString("child_name");

                if (!day.equals(currentDay) || !time.equals(currentTime)) {
                    sb.append("\nüìÖ ").append(day).append(" ").append(time).append("\n");
                    currentDay = day;
                    currentTime = time;
                }
                if (child != null) {
                    sb.append("   üë∂ ").append(child).append("\n");
                }
            }
            sendMessage(chatId, sb.toString());
        } catch (Exception e) {
            sendMessage(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π.");
        }
    }

    private void sendDailyReport(long chatId) {
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             PreparedStatement pstmt = conn.prepareStatement(
                     "SELECT s.day, s.time, b.child_name " +
                             "FROM bookings b JOIN schedule s ON b.schedule_id = s.id " +
                             "WHERE DATE(b.booking_date) = CURRENT_DATE " +
                             "ORDER BY s.day, s.time")) {

            ResultSet rs = pstmt.executeQuery();
            StringBuilder sb = new StringBuilder("üìä –û—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n");
            String currentDay = "";
            String currentTime = "";
            while (rs.next()) {
                String day = rs.getString("day");
                String time = rs.getString("time");
                String child = rs.getString("child_name");

                if (!day.equals(currentDay) || !time.equals(currentTime)) {
                    sb.append("\nüìÖ ").append(day).append(" ").append(time).append("\n");
                    currentDay = day;
                    currentTime = time;
                }
                sb.append("   üë∂ ").append(child).append("\n");
            }
            sendMessage(chatId, sb.toString());
        } catch (Exception e) {
            sendMessage(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞.");
        }
    }

    // ========== –ö–õ–ò–ï–ù–¢–°–ö–û–ï –ú–ï–ù–Æ ==========
    private void startBookingProcess(long chatId) {
        UserState userState = new UserState();
        userState.state = BookingState.SELECT_DAY;
        userStates.put(chatId, userState);
        sendDaySelection(chatId);
    }

    private void processBookingStep(long chatId, String messageText) throws SQLException {
        UserState userState = userStates.get(chatId);
        switch (userState.state) {
            case SELECT_DAY -> handleDaySelection(chatId, messageText);
            case SELECT_TIME -> handleTimeSelection(chatId, messageText);
            case ENTER_CHILD_NAME -> handleChildNameInput(chatId, messageText);
            case CONFIRM -> handleConfirmation(chatId, messageText);
            case CANCEL_SELECT -> handleCancelBooking(chatId, messageText);
            default -> sendMessage(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.");
        }
    }

    private void sendDaySelection(long chatId) {
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery("SELECT DISTINCT day FROM schedule")) {
            List<String> days = new ArrayList<>();
            while (rs.next()) days.add(rs.getString("day"));
            sendKeyboard(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ '–ù–µ–π—Ä–æ–≥–∏–º–Ω–∞—Å—Ç–∏–∫—É':", days);
        } catch (Exception e) {
            sendMessage(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–Ω–µ–π");
        }
    }

    private void handleDaySelection(long chatId, String day) {
        UserState userState = userStates.get(chatId);
        userState.selectedDay = day;
        userState.state = BookingState.SELECT_TIME;
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             PreparedStatement pstmt = conn.prepareStatement(
                     "SELECT id, time FROM schedule WHERE day = ? AND booked_places < max_places")) {
            pstmt.setString(1, day);
            ResultSet rs = pstmt.executeQuery();
            List<String> times = new ArrayList<>();
            while (rs.next()) times.add(rs.getString("time"));
            if (times.isEmpty()) {
                sendMessage(chatId, "‚ùå –ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç");
                sendDaySelection(chatId);
            } else {
                sendKeyboard(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:", times);
            }
        } catch (Exception e) {
            sendMessage(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤—Ä–µ–º–µ–Ω–∏");
        }
    }

    private void handleTimeSelection(long chatId, String time) {
        UserState userState = userStates.get(chatId);
        userState.selectedTime = time;
        userState.state = BookingState.ENTER_CHILD_NAME;
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             PreparedStatement pstmt = conn.prepareStatement(
                     "SELECT id FROM schedule WHERE day = ? AND time = ?")) {
            pstmt.setString(1, userState.selectedDay);
            pstmt.setString(2, time);
            ResultSet rs = pstmt.executeQuery();
            if (rs.next()) {
                userState.scheduleId = rs.getInt("id");
                sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é —Ä–µ–±—ë–Ω–∫–∞:");
            }
        } catch (Exception e) {
            sendMessage(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏");
        }
    }

    private void handleChildNameInput(long chatId, String childName) {
        UserState userState = userStates.get(chatId);
        userState.childName = childName;
        userState.state = BookingState.CONFIRM;
        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
        KeyboardRow row = new KeyboardRow();
        row.add(new KeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"));
        row.add(new KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥"));
        keyboard.setKeyboard(List.of(row));
        keyboard.setResizeKeyboard(true);
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø–∏—Å—å:\n\n" +
                "üë∂ –†–µ–±—ë–Ω–æ–∫: " + childName + "\n" +
                "üìö –ö—É—Ä—Å: –ù–µ–π—Ä–æ–≥–∏–º–Ω–∞—Å—Ç–∏–∫–∞\n" +
                "üìÖ –î–µ–Ω—å: " + userState.selectedDay + "\n" +
                "‚è∞ –í—Ä–µ–º—è: " + userState.selectedTime + "\n\n" +
                "–í—Å—ë –≤–µ—Ä–Ω–æ?");
        message.setReplyMarkup(keyboard);
        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void handleConfirmation(long chatId, String confirmation) {
        UserState userState = userStates.get(chatId);
        if (confirmation.equals("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")) {
            try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD)) {
                conn.setAutoCommit(false);
                try (PreparedStatement pstmt1 = conn.prepareStatement(
                        "UPDATE schedule SET booked_places = booked_places + 1 WHERE id = ? AND booked_places < max_places")) {
                    pstmt1.setInt(1, userState.scheduleId);
                    int updated = pstmt1.executeUpdate();
                    if (updated == 0) {
                        sendMessage(chatId, "‚ùå –ú–µ—Å—Ç–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.");
                        sendDaySelection(chatId);
                        return;
                    }
                }
                try (PreparedStatement pstmt2 = conn.prepareStatement(
                        "INSERT INTO bookings (user_id, child_name, schedule_id) VALUES (?, ?, ?)")) {
                    pstmt2.setLong(1, chatId);
                    pstmt2.setString(2, userState.childName);
                    pstmt2.setInt(3, userState.scheduleId);
                    pstmt2.executeUpdate();
                }
                conn.commit();
                sendMessage(chatId, "‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ –Ω–∞ –∏–º—è: " + userState.childName + "\n\n" +
                        "–ö—É—Ä—Å: –ù–µ–π—Ä–æ–≥–∏–º–Ω–∞—Å—Ç–∏–∫–∞\n" +
                        "–î–µ–Ω—å: " + userState.selectedDay + "\n" +
                        "–í—Ä–µ–º—è: " + userState.selectedTime);
                sendStartMessage(chatId);
            } catch (Exception e) {
                sendMessage(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏");
            }
        } else {
            sendDaySelection(chatId);
        }
        userStates.remove(chatId);
    }

    private void startCancelBookingProcess(long chatId) {
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             PreparedStatement pstmt = conn.prepareStatement(
                     "SELECT b.id, s.day, s.time, b.child_name " +
                             "FROM bookings b JOIN schedule s ON b.schedule_id = s.id " +
                             "WHERE b.user_id = ? ORDER BY b.id")) {
            pstmt.setLong(1, chatId);
            ResultSet rs = pstmt.executeQuery();
            List<String> bookings = new ArrayList<>();
            Map<Integer, Integer> bookingIds = new HashMap<>();
            int count = 1;
            while (rs.next()) {
                String bookingInfo = String.format("%d. %s - %s %s",
                        count, rs.getString("child_name"), rs.getString("day"), rs.getString("time"));
                bookings.add(bookingInfo);
                bookingIds.put(count, rs.getInt("id"));
                count++;
            }
            if (bookings.isEmpty()) {
                sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.");
                return;
            }
            UserState userState = new UserState();
            userState.state = BookingState.CANCEL_SELECT;
            userState.bookingOptions = bookingIds;
            userStates.put(chatId, userState);
            StringBuilder messageText = new StringBuilder("–í–∞—à–∏ –∑–∞–ø–∏—Å–∏:\n\n");
            for (String booking : bookings) messageText.append(booking).append("\n");
            messageText.append("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã:");
            sendMessage(chatId, messageText.toString());
        } catch (Exception e) {
            sendMessage(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π");
        }
    }

    private void handleCancelBooking(long chatId, String input) {
        UserState userState = userStates.get(chatId);
        try {
            int choice = Integer.parseInt(input);
            Integer bookingId = userState.bookingOptions.get(choice);
            if (bookingId == null) {
                sendMessage(chatId, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
                return;
            }
            try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD)) {
                conn.setAutoCommit(false);
                int scheduleId;
                try (PreparedStatement pstmt = conn.prepareStatement(
                        "SELECT schedule_id FROM bookings WHERE id = ?")) {
                    pstmt.setInt(1, bookingId);
                    ResultSet rs = pstmt.executeQuery();
                    if (!rs.next()) {
                        sendMessage(chatId, "–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
                        return;
                    }
                    scheduleId = rs.getInt("schedule_id");
                }
                try (PreparedStatement pstmt = conn.prepareStatement(
                        "DELETE FROM bookings WHERE id = ?")) {
                    pstmt.setInt(1, bookingId);
                    pstmt.executeUpdate();
                }
                try (PreparedStatement pstmt = conn.prepareStatement(
                        "UPDATE schedule SET booked_places = booked_places - 1 WHERE id = ?")) {
                    pstmt.setInt(1, scheduleId);
                    pstmt.executeUpdate();
                }
                conn.commit();
                sendMessage(chatId, "‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.");
            }
        } catch (NumberFormatException e) {
            sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏.");
        } catch (Exception e) {
            sendMessage(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏");
        } finally {
            userStates.remove(chatId);
            sendStartMessage(chatId);
        }
    }

    private void sendKeyboard(long chatId, String text, List<String> options) {
        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
        List<KeyboardRow> rows = new ArrayList<>();
        for (int i = 0; i < options.size(); i += 2) {
            KeyboardRow row = new KeyboardRow();
            row.add(new KeyboardButton(options.get(i)));
            if (i + 1 